require('dotenv').config();
const express = require('express');
const router = express.Router();
const db = require('../db');

// Get available trips for drivers (real-time polling)
router.get('/available/:driverId', async (req, res) => {
    const { driverId } = req.params;
    
    try {
        console.log(`üöó Fetching available trips for driver: ${driverId}`);
        
        // NOUVEAU: V√©rifier d'abord si ce chauffeur a une course sp√©cifiquement assign√©e via CourseQueue
        // IMPORTANT: Exclure les courses que ce chauffeur a refus√©es (blacklist)
        const queueResult = await db.query(`
            SELECT 
                c.id_course,
                c.adresse_depart,
                c.adresse_arrivee,
                c.distance_km,
                c.duree_min,
                c.prix,
                c.mode_paiement,
                c.mode_silencieux,
                c.latitude_depart,
                c.longitude_depart,
                c.latitude_arrivee,
                c.longitude_arrivee,
                c.telephone_client,
                c.nom_client,
                c.date_heure_depart,
                c.etat_course,
                cl.nom as client_nom,
                cl.prenom as client_prenom,
                cq.date_proposition,
                cq.timeout_proposition
            FROM CourseQueue cq
            JOIN Course c ON cq.id_course = c.id_course
            LEFT JOIN Client cl ON c.id_client = cl.id_client
            WHERE cq.id_chauffeur_current = $1 
              AND cq.statut_queue = 'proposed'
              AND cq.timeout_proposition > CURRENT_TIMESTAMP
              AND c.etat_course = 'en_attente'
              AND c.id_course NOT IN (
                  SELECT cr.id_course 
                  FROM CourseRefusal cr 
                  WHERE cr.id_chauffeur = $1
              )
            ORDER BY cq.date_proposition DESC
            LIMIT 1
        `, [driverId]);
        
        console.log(`üìä Found ${queueResult.rowCount} assigned trips in queue for driver ${driverId}`);
        
        let result = queueResult;
        
        // Si pas de course assign√©e, chercher dans les courses g√©n√©rales (ancien syst√®me de fallback)
        // IMPORTANT: Aussi exclure les courses refus√©es dans le fallback
        if (queueResult.rowCount === 0) {
            console.log(`üîÑ No queue assignment, checking general available trips...`);
            result = await db.query(`
                SELECT 
                    c.id_course,
                    c.adresse_depart,
                    c.adresse_arrivee,
                    c.distance_km,
                    c.duree_min,
                    c.prix,
                    c.mode_paiement,
                    c.mode_silencieux,
                    c.latitude_depart,
                    c.longitude_depart,
                    c.latitude_arrivee,
                    c.longitude_arrivee,
                    c.telephone_client,
                    c.nom_client,
                    c.date_heure_depart,
                    c.etat_course,
                    cl.nom as client_nom,
                    cl.prenom as client_prenom
                FROM Course c
                LEFT JOIN Client cl ON c.id_client = cl.id_client
                WHERE c.etat_course = 'en_attente' 
                AND c.id_chauffeur IS NULL
                AND c.id_course NOT IN (
                    SELECT cr.id_course 
                    FROM CourseRefusal cr 
                    WHERE cr.id_chauffeur = $1
                )
                ORDER BY c.date_heure_depart ASC
                LIMIT 1
            `, [driverId]);
        }
        
        console.log(`üìä Found ${result.rowCount} available trips in database`);
        
        // Debug: Log what we found
        if (result.rowCount > 0) {
            console.log('üîç Available trip details:', {
                id: result.rows[0].id_course,
                status: result.rows[0].etat_course,
                driver_assigned: result.rows[0].id_chauffeur,
                created: result.rows[0].date_heure_depart
            });
        }

        if (result.rowCount === 0) {
            return res.json({
                success: true,
                hasTrip: false,
                trip: null
            });
        }

        const trip = result.rows[0];
        
        // Calculate estimated pickup time based on driver location (mock for now)
        const estimatedPickupTime = 8; // minutes
        
        res.json({
            success: true,
            hasTrip: true,
            trip: {
                id: trip.id_course,
                type: 'ride',
                pickup: trip.adresse_depart,
                destination: trip.adresse_arrivee,
                distance: `${trip.distance_km} km`,
                duration: `${trip.duree_min} min`,
                eta: `${estimatedPickupTime} min`,
                price: trip.prix,
                paymentMethod: trip.mode_paiement,
                silentMode: trip.mode_silencieux,
                clientName: `${trip.client_prenom || ''} ${trip.client_nom || ''}`.trim() || trip.nom_client || 'Client Vamo',
                clientPhone: trip.telephone_client,
                pickupCoords: {
                    latitude: parseFloat(trip.latitude_depart),
                    longitude: parseFloat(trip.longitude_depart)
                },
                destinationCoords: {
                    latitude: parseFloat(trip.latitude_arrivee),
                    longitude: parseFloat(trip.longitude_arrivee)
                }
            }
        });

    } catch (err) {
        console.error("‚ùå Error fetching available trips:", err);
        res.status(500).json({
            success: false,
            error: 'Erreur serveur'
        });
    }
});

// Accept a trip (integrated with attribution system)
router.post('/accept', async (req, res) => {
    const { driverId, tripId } = req.body;
    
    if (!driverId || !tripId) {
        return res.status(400).json({
            success: false,
            error: 'driverId et tripId sont requis'
        });
    }

    try {
        console.log(`üöó Driver ${driverId} accepting trip ${tripId} via trips/accept endpoint`);
        console.log(`üìä Request body:`, req.body);
        
        // Use the new attribution system for accepting trips
        const courseAttributionService = require('../services/courseAttributionService');
        console.log(`üì° Calling attribution service handleDriverResponse...`);
        
        const result = await courseAttributionService.handleDriverResponse(tripId, driverId, 'accept');
        console.log(`üìã Attribution service result:`, result);

        if (result.success) {
            console.log(`‚úÖ Trip ${tripId} accepted by driver ${driverId} via attribution system`);
            
            // Get complete trip data to return in the expected format
            const tripData = await db.query(`
                SELECT 
                    c.*,
                    cl.nom as client_nom,
                    cl.prenom as client_prenom
                FROM Course c
                LEFT JOIN Client cl ON c.id_client = cl.id_client
                WHERE c.id_course = $1
            `, [tripId]);
            
            if (tripData.rowCount > 0) {
                const trip = tripData.rows[0];
                
                return res.json({
                    success: true,
                    message: 'Course accept√©e avec succ√®s',
                    trip: {
                        id: trip.id_course,
                        type: 'ride',
                        pickup: trip.adresse_depart,
                        destination: trip.adresse_arrivee,
                        distance: `${trip.distance_km} km`,
                        duration: `${trip.duree_min} min`,
                        price: trip.prix,
                        paymentMethod: trip.mode_paiement,
                        silentMode: trip.mode_silencieux,
                        clientName: `${trip.client_prenom || ''} ${trip.client_nom || ''}`.trim() || trip.nom_client || 'Client Vamo',
                        clientPhone: trip.telephone_client,
                        status: trip.etat_course,
                        pickupCoords: {
                            latitude: parseFloat(trip.latitude_depart) || 0,
                            longitude: parseFloat(trip.longitude_depart) || 0
                        },
                        destinationCoords: {
                            latitude: parseFloat(trip.latitude_arrivee) || 0,
                            longitude: parseFloat(trip.longitude_arrivee) || 0
                        }
                    }
                });
            } else {
                console.log(`‚ùå No trip data found after attribution success for trip ${tripId}`);
                return res.status(404).json({
                    success: false,
                    error: 'Course non trouv√©e apr√®s acceptation'
                });
            }
        } else {
            console.log(`‚ùå Attribution system failed to accept trip ${tripId}: ${result.error}`);
            
            // Fallback: Try direct database approach
            console.log(`üîÑ Attempting fallback direct database acceptance...`);
            
            try {
                await db.query('BEGIN');
                
                // Check if trip is still available
                const tripCheck = await db.query(`
                    SELECT id_course, etat_course, id_chauffeur 
                    FROM Course 
                    WHERE id_course = $1 AND etat_course = 'en_attente' AND id_chauffeur IS NULL
                `, [tripId]);
                
                if (tripCheck.rowCount === 0) {
                    await db.query('ROLLBACK');
                    return res.status(409).json({
                        success: false,
                        error: 'Cette course n\'est plus disponible'
                    });
                }
                
                // Assign trip to driver directly
                const updateResult = await db.query(`
                    UPDATE Course 
                    SET id_chauffeur = $1, 
                        etat_course = 'acceptee',
                        date_heure_depart = CURRENT_TIMESTAMP
                    WHERE id_course = $2 AND etat_course = 'en_attente' AND id_chauffeur IS NULL
                    RETURNING *
                `, [parseInt(driverId) || 1, tripId]);
                
                if (updateResult.rowCount === 0) {
                    await db.query('ROLLBACK');
                    return res.status(409).json({
                        success: false,
                        error: 'Impossible d\'accepter la course'
                    });
                }
                
                // Log status change
                await db.query(`
                    INSERT INTO EtatCourse (id_course, ancien_etat, nouvel_etat, commentaire)
                    VALUES ($1, 'en_attente', 'acceptee', 'Course accept√©e par le chauffeur (fallback)')
                `, [tripId]);
                
                await db.query('COMMIT');
                
                const trip = updateResult.rows[0];
                console.log(`‚úÖ Trip ${tripId} accepted via fallback method`);
                
                return res.json({
                    success: true,
                    message: 'Course accept√©e avec succ√®s (fallback)',
                    trip: {
                        id: trip.id_course,
                        type: 'ride',
                        pickup: trip.adresse_depart,
                        destination: trip.adresse_arrivee,
                        distance: `${trip.distance_km} km`,
                        duration: `${trip.duree_min} min`,
                        price: trip.prix,
                        paymentMethod: trip.mode_paiement || 'wave',
                        silentMode: trip.mode_silencieux || false,
                        clientName: trip.nom_client || 'Client Vamo',
                        clientPhone: trip.telephone_client,
                        status: trip.etat_course,
                        pickupCoords: {
                            latitude: parseFloat(trip.latitude_depart) || 0,
                            longitude: parseFloat(trip.longitude_depart) || 0
                        },
                        destinationCoords: {
                            latitude: parseFloat(trip.latitude_arrivee) || 0,
                            longitude: parseFloat(trip.longitude_arrivee) || 0
                        }
                    }
                });
                
            } catch (fallbackErr) {
                await db.query('ROLLBACK');
                console.error('‚ùå Fallback method also failed:', fallbackErr);
                return res.status(500).json({
                    success: false,
                    error: 'Erreur lors de l\'acceptation de la course',
                    details: fallbackErr.message
                });
            }
        }

    } catch (err) {
        console.error("‚ùå Error accepting trip:", err);
        console.error("‚ùå Stack trace:", err.stack);
        console.error("‚ùå Error details:", {
            message: err.message,
            name: err.name,
            code: err.code
        });
        
        // Ensure we always return JSON
        if (!res.headersSent) {
            res.status(500).json({
                success: false,
                error: 'Erreur serveur',
                details: err.message
            });
        }
    }
});

// Update trip status (arrived at pickup, started trip, completed trip)
router.post('/status', async (req, res) => {
    const { driverId, tripId, status, location } = req.body;
    
    if (!driverId || !tripId || !status) {
        return res.status(400).json({
            success: false,
            error: 'driverId, tripId et status sont requis'
        });
    }

    try {
        console.log(`üöó Updating trip ${tripId} status to: ${status}`);
        
        // Validate status transition
        const validStatuses = ['en_route_pickup', 'arrivee_pickup', 'en_cours', 'terminee'];
        if (!validStatuses.includes(status)) {
            return res.status(400).json({
                success: false,
                error: 'Statut invalide'
            });
        }
        
        await db.query('BEGIN');
        
        // Get current trip status
        const currentTrip = await db.query(`
            SELECT etat_course, id_chauffeur 
            FROM Course 
            WHERE id_course = $1
        `, [tripId]);
        
        if (currentTrip.rowCount === 0) {
            await db.query('ROLLBACK');
            return res.status(404).json({
                success: false,
                error: 'Course non trouv√©e'
            });
        }
        
        if (currentTrip.rows[0].id_chauffeur !== parseInt(driverId)) {
            await db.query('ROLLBACK');
            return res.status(403).json({
                success: false,
                error: 'Vous n\'√™tes pas assign√© √† cette course'
            });
        }
        
        const oldStatus = currentTrip.rows[0].etat_course;
        let updateQuery;
        let updateParams;
        
        // Determine what timestamp to update based on status
        switch (status) {
            case 'arrivee_pickup':
                updateQuery = `
                    UPDATE Course 
                    SET etat_course = $1, date_heure_arrivee_pickup = CURRENT_TIMESTAMP 
                    WHERE id_course = $2 AND id_chauffeur = $3
                `;
                updateParams = [status, tripId, driverId];
                break;
                
            case 'en_cours':
                updateQuery = `
                    UPDATE Course 
                    SET etat_course = $1, date_heure_debut_course = CURRENT_TIMESTAMP 
                    WHERE id_course = $2 AND id_chauffeur = $3
                `;
                updateParams = [status, tripId, driverId];
                break;
                
            case 'terminee':
                updateQuery = `
                    UPDATE Course 
                    SET etat_course = $1, date_heure_arrivee = CURRENT_TIMESTAMP 
                    WHERE id_course = $2 AND id_chauffeur = $3
                `;
                updateParams = [status, tripId, driverId];
                break;
                
            default:
                updateQuery = `
                    UPDATE Course 
                    SET etat_course = $1 
                    WHERE id_course = $2 AND id_chauffeur = $3
                `;
                updateParams = [status, tripId, driverId];
        }
        
        const updateResult = await db.query(updateQuery, updateParams);
        
        if (updateResult.rowCount === 0) {
            await db.query('ROLLBACK');
            return res.status(400).json({
                success: false,
                error: 'Impossible de mettre √† jour le statut'
            });
        }
        
        // Log status change
        await db.query(`
            INSERT INTO EtatCourse (id_course, ancien_etat, nouvel_etat, commentaire)
            VALUES ($1, $2, $3, $4)
        `, [tripId, oldStatus, status, `Statut mis √† jour par le chauffeur`]);
        
        await db.query('COMMIT');
        
        console.log(`‚úÖ Trip ${tripId} status updated from ${oldStatus} to ${status}`);
        
        res.json({
            success: true,
            message: 'Statut mis √† jour avec succ√®s',
            oldStatus,
            newStatus: status
        });

    } catch (err) {
        await db.query('ROLLBACK');
        console.error("‚ùå Error updating trip status:", err);
        res.status(500).json({
            success: false,
            error: 'Erreur serveur'
        });
    }
});

// Get current trip for driver
router.get('/current/:driverId', async (req, res) => {
    const { driverId } = req.params;
    
    try {
        console.log(`üöó Fetching current trip for driver: ${driverId}`);
        
        const result = await db.query(`
            SELECT 
                c.*,
                cl.nom as client_nom,
                cl.prenom as client_prenom
            FROM Course c
            LEFT JOIN Client cl ON c.id_client = cl.id_client
            WHERE c.id_chauffeur = $1 
            AND c.etat_course IN ('acceptee', 'en_route_pickup', 'arrivee_pickup', 'en_cours')
            ORDER BY c.date_heure_depart DESC
            LIMIT 1
        `, [driverId]);

        if (result.rowCount === 0) {
            return res.json({
                success: true,
                hasCurrentTrip: false,
                trip: null
            });
        }

        const trip = result.rows[0];
        
        res.json({
            success: true,
            hasCurrentTrip: true,
            trip: {
                id: trip.id_course,
                type: 'ride',
                pickup: trip.adresse_depart,
                destination: trip.adresse_arrivee,
                distance: `${trip.distance_km} km`,
                duration: `${trip.duree_min} min`,
                price: trip.prix,
                paymentMethod: trip.mode_paiement,
                silentMode: trip.mode_silencieux,
                clientName: `${trip.client_prenom || ''} ${trip.client_nom || ''}`.trim() || trip.nom_client || 'Client Vamo',
                clientPhone: trip.telephone_client,
                status: trip.etat_course,
                pickupCoords: {
                    latitude: parseFloat(trip.latitude_depart),
                    longitude: parseFloat(trip.longitude_depart)
                },
                destinationCoords: {
                    latitude: parseFloat(trip.latitude_arrivee),
                    longitude: parseFloat(trip.longitude_arrivee)
                },
                timestamps: {
                    accepted: trip.date_heure_depart,
                    arrivedPickup: trip.date_heure_arrivee_pickup,
                    started: trip.date_heure_debut_course,
                    completed: trip.date_heure_arrivee
                }
            }
        });

    } catch (err) {
        console.error("‚ùå Error fetching current trip:", err);
        res.status(500).json({
            success: false,
            error: 'Erreur serveur'
        });
    }
});

// Complete trip and confirm payment
router.post('/complete', async (req, res) => {
    const { driverId, tripId, paymentMethod } = req.body;
    
    if (!driverId || !tripId || !paymentMethod) {
        return res.status(400).json({
            success: false,
            error: 'driverId, tripId et paymentMethod sont requis'
        });
    }

    try {
        console.log(`üöó Completing trip ${tripId} with payment: ${paymentMethod}`);
        
        await db.query('BEGIN');
        
        // Update trip as completed and set payment method
        const updateResult = await db.query(`
            UPDATE Course 
            SET etat_course = 'terminee',
                mode_paiement = $1,
                est_paye = true,
                date_heure_arrivee = COALESCE(date_heure_arrivee, CURRENT_TIMESTAMP)
            WHERE id_course = $2 AND id_chauffeur = $3 AND etat_course IN ('en_cours', 'terminee')
            RETURNING *
        `, [paymentMethod, tripId, driverId]);
        
        if (updateResult.rowCount === 0) {
            await db.query('ROLLBACK');
            return res.status(400).json({
                success: false,
                error: 'Impossible de terminer la course'
            });
        }
        
        // Create payment record
        await db.query(`
            INSERT INTO Paiement (id_course, mode, date_paiement)
            VALUES ($1, $2, CURRENT_TIMESTAMP)
            ON CONFLICT DO NOTHING
        `, [tripId, paymentMethod]);
        
        // Log status change
        await db.query(`
            INSERT INTO EtatCourse (id_course, ancien_etat, nouvel_etat, commentaire)
            VALUES ($1, 'en_cours', 'terminee', 'Course termin√©e et paiement confirm√©')
        `, [tripId]);
        
        await db.query('COMMIT');
        
        const trip = updateResult.rows[0];
        
        console.log(`‚úÖ Trip ${tripId} completed successfully`);
        
        res.json({
            success: true,
            message: 'Course termin√©e avec succ√®s',
            trip: {
                id: trip.id_course,
                price: trip.prix,
                paymentMethod: trip.mode_paiement,
                completedAt: trip.date_heure_arrivee
            }
        });

    } catch (err) {
        await db.query('ROLLBACK');
        console.error("‚ùå Error completing trip:", err);
        res.status(500).json({
            success: false,
            error: 'Erreur serveur'
        });
    }
});

// Cancel trip
router.post('/cancel', async (req, res) => {
    const { driverId, tripId, reason } = req.body;
    
    if (!driverId || !tripId) {
        return res.status(400).json({
            success: false,
            error: 'driverId et tripId sont requis'
        });
    }

    try {
        console.log(`üöó Cancelling trip ${tripId}, reason: ${reason || 'No reason provided'}`);
        
        await db.query('BEGIN');
        
        // Get current trip status
        const currentTrip = await db.query(`
            SELECT etat_course 
            FROM Course 
            WHERE id_course = $1 AND id_chauffeur = $2
        `, [tripId, driverId]);
        
        if (currentTrip.rowCount === 0) {
            await db.query('ROLLBACK');
            return res.status(404).json({
                success: false,
                error: 'Course non trouv√©e'
            });
        }
        
        const oldStatus = currentTrip.rows[0].etat_course;
        
        // Cancel trip
        await db.query(`
            UPDATE Course 
            SET etat_course = 'annulee', id_chauffeur = NULL
            WHERE id_course = $1 AND id_chauffeur = $2
        `, [tripId, driverId]);
        
        // Log cancellation
        await db.query(`
            INSERT INTO EtatCourse (id_course, ancien_etat, nouvel_etat, commentaire)
            VALUES ($1, $2, 'annulee', $3)
        `, [tripId, oldStatus, reason || 'Course annul√©e par le chauffeur']);
        
        await db.query('COMMIT');
        
        console.log(`‚úÖ Trip ${tripId} cancelled successfully`);
        
        res.json({
            success: true,
            message: 'Course annul√©e avec succ√®s'
        });

    } catch (err) {
        await db.query('ROLLBACK');
        console.error("‚ùå Error cancelling trip:", err);
        res.status(500).json({
            success: false,
            error: 'Erreur serveur'
        });
    }
});

module.exports = router;